<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 
<mapper namespace="연결할 인터페이스의 패키지를 포함한 이름">

	<select id=""></select>
	<insert id=""></insert>
	<update id=""></update>
	<delete id=""></delete>
	
</mapper> 
-->
<!--  
Mybatis 쿼리성공시 반환값

select : select문에 해당하는 결과를 반환한다. 아래와 같이 select 결과가 MyBoardDTO타입이라면
패키지명을 포함한 클래스경로를 resultType속성에 기술한다. 만약 여러개의 레코드가 반환되면
List계열의 컬렉션에 저장되어 반환된다.

insert : 무조건 1을 반환한다. 만약 insert가 여러 번 되더라도 성공시에는 1을 반환하게 된다. 실패라면
0을 반환한다.

update/delete : 업데이트/삭제에 성공한 행의 갯수를 반환한다. 조건에 따라서 여러 개의 레코드가
적용될 수 있으므로 큰 값이 반환될 수도 있다. 실패라면 0을 반환한다.

속성
   namespace : 해당 Mapper 파일을 호출하기 위해 정의한 인터페이스의 패키지를 포함한 풀경로를 기술한다.
      
   id: : 실제 호출되는 함수명과 일치한다.
   resultType : 쿼리 실행 후 반환되는 값의 타입.
   parameterType : 쿼리문에서 사용할 파라미터를 저장한 객체의 타입.
-->
<mapper namespace="mybatis.MybatisDAOImpl">

	<select id="getTotalCount" resultType="int">
		select count(*) from myboard
	</select>
	<!-- 
		컨트롤러에서 listPage(int s, int e) 이와같이 호출했을때 아래 엘리먼트가 실제
		동작한다. 매개변수는 id속성에 명시하지 않고, 사용시에는 순서대로 param1,param2 와
		같이 사용한다.
	 -->
	<select id="listPage" resultType="mybatis.MyBoardDTO">
	select * from (
		select tb.*, rownum rNum from(
			select * from myboard order by idx desc
		) tb
	)
	where rNum between #{param1} and #{param2}
	</select>
	
	<insert id="write">
		insert into myboard (idx,id,name,contents) values (myboard_seq.nextval,
		#{_id}, #{_name}, #{_contents})
	</insert>
	
	<!-- 
		매개변수로 전달된 DTO객체의 멤버변수명만 명시하면 내부적으로 getter() 메소드를 통해 값을
		가져온다.
	 -->
  	<select id="view" resultType="mybatis.MyBoardDTO" parameterType="mybatis.ParameterDTO" >
  		select * from myboard where idx=#{board_idx} and id=#{user_id}
  	</select>
  	
  	<update id="modify">
  		update myboard set name=#{param2}, contents=#{param3}
  		where idx=#{param1} and id=#{param4}
  	</update>
  	
  	<delete id="delete">
  		delete from myboard where idx=#{param1} and id= #{param2}
  	</delete>
	
</mapper>